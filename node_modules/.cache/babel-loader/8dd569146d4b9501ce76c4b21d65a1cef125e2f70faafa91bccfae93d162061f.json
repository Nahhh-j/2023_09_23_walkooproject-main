{"ast":null,"code":"import { defineComponent, ref, computed } from \"vue\";\nimport { startOfMonth, endOfMonth, eachDayOfInterval, format, addMonths, subMonths, getDay } from \"date-fns\";\nexport default defineComponent({\n  name: \"NewWalkRecordpage\",\n  components: {\n    // Modal 컴포넌트 등록\n  },\n  setup() {\n    const currentDate = ref(new Date());\n    const showModal = ref(false);\n    const currentMonth = ref(new Date());\n    const showRecordPage = ref(false);\n    const selectedDate = ref(\"\");\n    const daysOfWeek = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\n    const daysInMonth = computed(() => {\n      const start = startOfMonth(currentMonth.value);\n      const end = endOfMonth(currentMonth.value);\n      const days = eachDayOfInterval({\n        start,\n        end\n      });\n\n      // 각 월의 첫째 날짜의 요일을 얻습니다.\n      const firstDayOfWeek = getDay(start);\n\n      // 첫째 날짜 이전에는 빈 칸을 생성합니다.\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        days.unshift(null);\n      }\n      return days.map(date => date ? format(date, \"dd\") : \"\");\n    });\n    function showCalendarModal() {\n      showModal.value = true;\n    }\n    function closeModal() {\n      showModal.value = false;\n    }\n    function prevMonth() {\n      currentMonth.value = subMonths(currentMonth.value, 1);\n    }\n    function nextMonth() {\n      currentMonth.value = addMonths(currentMonth.value, 1);\n    }\n    function toggleModal() {\n      showModal.value = !showModal.value;\n    }\n    function closeModalOnOverlay() {\n      closeModal();\n    }\n    function selectDate(date) {\n      selectedDate.value = date;\n      console.log(selectedDate.value);\n      closeModal();\n      showRecordPage.value = true;\n    }\n    return {\n      currentDate: computed(() => format(currentDate.value, \"yyyy년 MM월 dd일\")),\n      showModal,\n      currentMonth: computed(() => format(currentMonth.value, \"MMMM yyyy\")),\n      daysInMonth,\n      daysOfWeek,\n      showCalendarModal,\n      prevMonth,\n      nextMonth,\n      closeModal,\n      toggleModal,\n      closeModalOnOverlay,\n      showRecordPage,\n      selectDate,\n      selectedDate\n    };\n  },\n  methods: {\n    toggleButton(button) {\n      if (this.selectedButton === button) {\n        this.selectedButton = null;\n      } else {\n        this.selectedButton = button;\n      }\n      this.showController = this.selectedButton === \"controller\";\n      this.showState = this.selectedButton === \"state\";\n      this.showHistory = this.selectedButton === \"history\";\n    }\n  }\n});","map":{"version":3,"names":["defineComponent","ref","computed","startOfMonth","endOfMonth","eachDayOfInterval","format","addMonths","subMonths","getDay","name","components","setup","currentDate","Date","showModal","currentMonth","showRecordPage","selectedDate","daysOfWeek","daysInMonth","start","value","end","days","firstDayOfWeek","i","unshift","map","date","showCalendarModal","closeModal","prevMonth","nextMonth","toggleModal","closeModalOnOverlay","selectDate","console","log","methods","toggleButton","button","selectedButton","showController","showState","showHistory"],"sources":["/Users/nayoung/Downloads/2023_09_23_walkooproject-main/src/components/NewWalkRecord.vue"],"sourcesContent":["<template>\n  <div class=\"NewWalkRecordPage\">\n    <!--top-->\n    <div class=\"top\">\n      <div class=\"top_wrap\">\n        <div class=\"top_left\">\n          <img\n            class=\"icon\"\n            src=\"../assets/LeftIcon.png\"\n            @click=\"$router.go(-1)\"\n          />\n        </div>\n        <p class=\"top_center top_name\">산책기록</p>\n      </div>\n    </div>\n    <!-- middle-->\n    <div class=\"date-icon-container\">\n      <div class=\"top_right\">\n        <p class=\"date-text\"><br />&emsp;&emsp;오늘은 {{ currentDate }}</p>\n        <div class=\"modal-wrapper\">\n          <div class=\"calendar-icon\" @click=\"toggleModal\"><br />📅</div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 모달창 부분을 추가합니다. v-if로 showModal 변수가 true일 때만 모달창이 나타납니다. -->\n    <div class=\"modal\" v-if=\"showModal\" @click=\"closeModalOnOverlay\">\n      <div class=\"modal-content\">\n        <!-- 캘린더 내용 -->\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"prevMonth\">&lt;</button>\n            <span>{{ currentMonth }}</span>\n            <button @click=\"nextMonth\">&gt;</button>\n          </div>\n          <!-- 요일 표시 부분 -->\n          <div class=\"calendar-days week-days\">\n            <div v-for=\"dayOfWeek in daysOfWeek\" :key=\"dayOfWeek\" class=\"day\">\n              {{ dayOfWeek }}\n            </div>\n          </div>\n          <div class=\"calendar-days\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day\"\n              class=\"day\"\n              @click=\"selectDate(day)\"\n            >\n              {{ day }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"record-page\" v-if=\"showRecordPage\">\n      <p>선택한 날짜 : {{ selectedDate }}</p>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nimport { defineComponent, ref, computed } from \"vue\";\nimport {\n  startOfMonth,\n  endOfMonth,\n  eachDayOfInterval,\n  format,\n  addMonths,\n  subMonths,\n  getDay,\n} from \"date-fns\";\n\nexport default defineComponent({\n  name: \"NewWalkRecordpage\",\n  components: {\n    // Modal 컴포넌트 등록\n  },\n  setup() {\n    const currentDate = ref(new Date());\n    const showModal = ref(false);\n    const currentMonth = ref(new Date());\n\n    const showRecordPage = ref(false);\n    const selectedDate = ref(\"\");\n\n    const daysOfWeek = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\n\n    const daysInMonth = computed(() => {\n      const start = startOfMonth(currentMonth.value);\n      const end = endOfMonth(currentMonth.value);\n      const days = eachDayOfInterval({ start, end });\n\n      // 각 월의 첫째 날짜의 요일을 얻습니다.\n      const firstDayOfWeek = getDay(start);\n\n      // 첫째 날짜 이전에는 빈 칸을 생성합니다.\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        days.unshift(null);\n      }\n\n      return days.map((date) => (date ? format(date, \"dd\") : \"\"));\n    });\n\n    function showCalendarModal() {\n      showModal.value = true;\n    }\n    function closeModal() {\n      showModal.value = false;\n    }\n\n    function prevMonth() {\n      currentMonth.value = subMonths(currentMonth.value, 1);\n    }\n\n    function nextMonth() {\n      currentMonth.value = addMonths(currentMonth.value, 1);\n    }\n\n    function toggleModal() {\n      showModal.value = !showModal.value;\n    }\n\n    function closeModalOnOverlay() {\n      closeModal();\n    }\n\n    function selectDate(date) {\n      selectedDate.value = date;\n      console.log(selectedDate.value);\n      closeModal();\n      showRecordPage.value = true;\n    }\n\n    return {\n      currentDate: computed(() =>\n        format(currentDate.value, \"yyyy년 MM월 dd일\")\n      ),\n      showModal,\n      currentMonth: computed(() => format(currentMonth.value, \"MMMM yyyy\")),\n      daysInMonth,\n      daysOfWeek,\n      showCalendarModal,\n      prevMonth,\n      nextMonth,\n      closeModal,\n      toggleModal,\n      closeModalOnOverlay,\n      showRecordPage,\n      selectDate,\n      selectedDate,\n    };\n  },\n  methods: {\n    toggleButton(button) {\n      if (this.selectedButton === button) {\n        this.selectedButton = null;\n      } else {\n        this.selectedButton = button;\n      }\n      this.showController = this.selectedButton === \"controller\";\n      this.showState = this.selectedButton === \"state\";\n      this.showHistory = this.selectedButton === \"history\";\n    },\n  },\n});\n</script>\n\n<style scoped>\n.NewWalkRecordPage {\n  background-color: #f1f8ff;\n  width: 100%;\n  height: 100vh;\n  overflow-y: auto;\n}\n.WalkRecordPage .top {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  height: 10%;\n  display: flex;\n  justify-content: center; /* 가로 중앙에 위치 */\n  align-items: flex-end;\n  background: #70b4cb;\n  padding: 1em;\n}\n.top {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  height: 10%;\n  display: flex;\n  justify-content: center; /* 가로 중앙에 위치 */\n  align-items: flex-end; /* 세로 위에서 70% 지점에 위치 */\n  background: #70b4cb;\n  padding: 1em;\n}\n.top_wrap {\n  width: 100%;\n  height: auto;\n  display: flex;\n  align-items: center;\n}\n.top_center {\n  width: 70%;\n  height: fit-content;\n  color: white;\n}\n.top_left {\n  width: 15%;\n  height: fit-content;\n}\n.top_right {\n  display: flex;\n  align-items: center;\n  text-align: center;\n  font-family: \"Inter\";\n  font-style: normal;\n  font-weight: 700;\n  font-size: 1.3rem;\n  line-height: 21px;\n\n  text-align: center;\n  letter-spacing: -0.32px;\n\n  color: rgb(48, 48, 48);\n}\n.top_name {\n  text-align: center;\n  font-family: \"Inter\";\n  font-style: normal;\n  font-weight: 700;\n  font-size: 1.3rem;\n  line-height: 21px;\n\n  text-align: center;\n  letter-spacing: -0.32px;\n\n  color: #ffffff;\n}\n.modal {\n  /* 기존 배경색과 테두리를 없앱니다. */\n  background-color: transparent;\n  border: none;\n  box-shadow: none;\n  position: absolute;\n  top: -15%;\n  left: 0;\n  right: 0;\n  bottom: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.modal[style*=\"display: block;\"] {\n  /* 모달창 열릴 때 애니메이션 효과 추가 */\n  animation: modalOpenAnim 0.3s ease-out;\n}\n@keyframes modalOpenAnim {\n  from {\n    transform: translateY(-50px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n.modal-content {\n  background-color: rgb(249, 252, 255);\n  padding: 160px;\n  width: 10px;\n  height: 1%;\n  border: 2px solid #b1c9e0;\n  border-radius: 17px;\n  animation: modalOpenAnim 0.5s ease-out;\n}\n.modal-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent; /* 배경색을 투명하게 설정합니다. */\n  z-index: 999;\n}\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: bold;\n  padding: 8px;\n  background-color: #ffffff;\n}\n.calendar-days {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 8px;\n  padding: 8px;\n}\n.day {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 32px;\n  height: 32px;\n}\n.calendar-icon {\n  cursor: pointer;\n}\n.calendar-header button {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n.calendar-header button:hover {\n  background-color: #f0f0f0;\n}\n\n.record-page {\n  background-color: rgb(247, 156, 156);\n  width: 85vw;\n  margin: 0 auto;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}