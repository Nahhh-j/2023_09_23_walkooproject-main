{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable no-undef */\nimport Sidebar from './sidebar/SidebarComponent.vue';\nimport { sidebarWidth, sidebarHeight } from './sidebar/state';\nimport pointImage from '@/assets/point.png';\nimport getpointImage from '@/assets/getpoint.png';\nfunction degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n}\nfunction calculateDistance(point1, point2) {\n  const lat1 = point1.getLat();\n  const lng1 = point1.getLng();\n  const lat2 = point2.getLat();\n  const lng2 = point2.getLng();\n  const earthRadiusKm = 6371;\n  const dLat = degreesToRadians(lat2 - lat1);\n  const dLng = degreesToRadians(lng2 - lng1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = earthRadiusKm * c;\n  return distance;\n}\nfunction calculateCaloriesBurned(distance) {\n  // Conversion factor (calories per kilometer)\n  const conversionFactor = 65;\n\n  // Calculate calories burned\n  const caloriesBurned = distance * conversionFactor;\n  return caloriesBurned;\n}\nexport default {\n  name: 'KakaoMap',\n  components: {\n    Sidebar\n  },\n  setup() {\n    return {\n      sidebarWidth,\n      sidebarHeight\n    };\n  },\n  data() {\n    return {\n      map: null,\n      openModal1: false,\n      openModal2: false,\n      timer: 0,\n      isWalking: false,\n      distance: 0,\n      // Keep track of total distance\n      watchId: null,\n      position: null,\n      marker: null,\n      previousPosition: null,\n      // Declare previousPosition variable\n      timeoutId: null,\n      // Declare timeoutId variable\n      timerId: null,\n      polyline: null,\n      images: Array(5).fill(pointImage),\n      averageNumberOfSteps: 0\n    };\n  },\n  mounted() {\n    if (window.kakao && !window.kakao.maps) {\n      this.initMap();\n    } else {\n      const script = document.createElement('script');\n      script.onload = () => kakao.maps.load(this.initMap);\n      script.src = '//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=930ce9e25463ef7e86418ee9d4ba0575';\n      document.head.appendChild(script);\n    }\n  },\n  methods: {\n    initMap() {\n      const success = position => {\n        this.position = position.coords;\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        const currentPosition = new kakao.maps.LatLng(latitude, longitude);\n        if (!this.map) {\n          const mapOptions = {\n            center: new kakao.maps.LatLng(latitude, longitude),\n            level: 3,\n            MapTypeId: kakao.maps.MapTypeId.ROADMAP\n          };\n          this.map = new kakao.maps.Map(document.getElementById('map'), mapOptions);\n          this.marker = new kakao.maps.Marker({\n            position: currentPosition,\n            map: this.map\n          });\n          this.polyline = new kakao.maps.Polyline({\n            map: this.map,\n            path: [],\n            strokeWeight: 5,\n            strokeColor: '#00FF00',\n            strokeOpacity: 0.7,\n            strokeStyle: 'solid'\n          });\n          this.previousPosition = currentPosition;\n        } else {\n          const path = this.polyline.getPath();\n          path.push(currentPosition);\n          this.polyline.setPath(path);\n          this.marker.setPosition(currentPosition);\n          this.map.panTo(currentPosition);\n          if (this.previousPosition) {\n            this.previousPosition = currentPosition;\n            const newDistance = calculateDistance(this.previousPosition, currentPosition);\n            this.distance += newDistance;\n            console.log(`Distance traveled: ${newDistance.toFixed(3)} km`);\n            console.log(`Total distance traveled: ${this.distance.toFixed(3)} km`);\n          }\n        }\n      };\n      function error(err) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n      }\n      const watchOptions = {\n        enableHighAccuracy: true\n      };\n      this.watchId = navigator.geolocation.watchPosition(success, error, watchOptions);\n    },\n    calculateAverageSteps(distance) {\n      const averageWalk = 0.762; // 평균적으로 성인 걸음 당 미터\n      const distanceInMeters = distance * 1000;\n      const averageNumberOfSteps = Math.round(distanceInMeters / averageWalk);\n      return averageNumberOfSteps;\n    },\n    startRandomMovement() {\n      if (this.position) {\n        const {\n          latitude,\n          longitude\n        } = this.position;\n        const randomLat = latitude + Math.random() * 0.001;\n        const randomLng = longitude + Math.random() * 0.001;\n        const newPosition = new kakao.maps.LatLng(randomLat, randomLng);\n        const path = this.polyline.getPath();\n        path.push(newPosition);\n        this.polyline.setPath(path);\n        this.marker.setPosition(newPosition);\n        this.map.panTo(newPosition);\n        if (this.previousPosition) {\n          const newDistance = calculateDistance(this.previousPosition, newPosition);\n          this.distance += newDistance;\n          const averageSteps = this.calculateAverageSteps(this.distance); // 걸음수 계산\n          this.averageNumberOfSteps = averageSteps;\n        }\n        this.previousPosition = newPosition;\n        this.timeoutId = setTimeout(() => {\n          this.startRandomMovement();\n        }, 2000);\n      } else {\n        console.error('Position is not available.');\n      }\n    },\n    stopTracking() {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.distance = 0;\n      this.totalDistance = 0;\n      console.log('Tracking stopped.');\n    },\n    startTimer() {\n      this.timerId = setInterval(() => {\n        this.timer += 1;\n      }, 1000);\n      this.isWalking = true;\n    },\n    stopTimer() {\n      clearInterval(this.timerId);\n      clearTimeout(this.timeoutId); // Add this line\n      this.timerId = null;\n      this.isWalking = false;\n    },\n    stopTimerAndNavigate() {\n      this.stopTimer();\n      this.totalDistance = this.distance; // Assign the current distance to totalDistance\n      this.distance = 0; // Reset the distance\n\n      const caloriesBurned = calculateCaloriesBurned(this.totalDistance); // Calculate calories bWalkDayReporturned\n      console.log(`소모칼로리: ${caloriesBurned.toFixed(0)} `);\n      const timeData = {\n        min: Math.floor(this.timer / 60),\n        seconds: this.timer % 60\n      };\n      console.log('timeData:', timeData);\n      console.log(`Final Distance: ${this.totalDistance.toFixed(3)} km`);\n      this.$router.push({\n        name: 'WalkDayReport',\n        query: {\n          min: timeData.min,\n          seconds: timeData.seconds,\n          distance: this.totalDistance,\n          calories: calculateCaloriesBurned(this.totalDistance),\n          steps: this.averageNumberOfSteps\n        }\n      });\n    },\n    toggleTimer() {\n      if (!this.isWalking) {\n        // Start the timer and random movement\n        this.isWalking = true;\n        this.timer = 0;\n        this.intervalId = setInterval(() => {\n          this.timer++;\n          if (this.timer % 5 === 0) {\n            this.changeImage();\n          }\n        }, 1000);\n        if (this.position) {\n          this.startRandomMovement();\n        } else {\n          console.error('Position is not available.');\n        }\n        // Call the startRandomMovement method\n      } else {\n        // Stop the timer\n        this.isWalking = false;\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeoutId);\n        this.stopTimer();\n        this.openModal2 = true;\n      }\n    },\n    changeImage() {\n      const newImage = getpointImage;\n      const currentIndex = Math.floor(this.timer / 5) - 1;\n      if (currentIndex < this.images.length) {\n        // Replace the image at the current index with the new image\n        this.images.splice(currentIndex, 1, newImage);\n      }\n    },\n    updateChangedImageCount(count) {\n      this.changedImageCount = count;\n    },\n    closeModal() {\n      this.openModal2 = false;\n      this.startTimer();\n      this.startRandomMovement(); // Call the startRandomMovement method\n    },\n\n    formatTime(seconds) {\n      const min = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return `${min.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    },\n    destroyed() {\n      this.stopTimer();\n    }\n  }\n};","map":{"version":3,"names":["Sidebar","sidebarWidth","sidebarHeight","pointImage","getpointImage","degreesToRadians","degrees","Math","PI","calculateDistance","point1","point2","lat1","getLat","lng1","getLng","lat2","lng2","earthRadiusKm","dLat","dLng","a","sin","cos","c","atan2","sqrt","distance","calculateCaloriesBurned","conversionFactor","caloriesBurned","name","components","setup","data","map","openModal1","openModal2","timer","isWalking","watchId","position","marker","previousPosition","timeoutId","timerId","polyline","images","Array","fill","averageNumberOfSteps","mounted","window","kakao","maps","initMap","script","document","createElement","onload","load","src","head","appendChild","methods","success","coords","latitude","longitude","currentPosition","LatLng","mapOptions","center","level","MapTypeId","ROADMAP","Map","getElementById","Marker","Polyline","path","strokeWeight","strokeColor","strokeOpacity","strokeStyle","getPath","push","setPath","setPosition","panTo","newDistance","console","log","toFixed","error","err","warn","code","message","watchOptions","enableHighAccuracy","navigator","geolocation","watchPosition","calculateAverageSteps","averageWalk","distanceInMeters","round","startRandomMovement","randomLat","random","randomLng","newPosition","averageSteps","setTimeout","stopTracking","clearWatch","totalDistance","startTimer","setInterval","stopTimer","clearInterval","clearTimeout","stopTimerAndNavigate","timeData","min","floor","seconds","$router","query","calories","steps","toggleTimer","intervalId","changeImage","newImage","currentIndex","length","splice","updateChangedImageCount","count","changedImageCount","closeModal","formatTime","remainingSeconds","toString","padStart","destroyed"],"sources":["/Users/nayoung/Downloads/2023_09_23_walkooproject-main/src/components/KakaoMap.vue"],"sourcesContent":["<template>\n    <div id=\"mappage\" class=\"scrollable-content\">\n      <!-- 산책취소할건지 확인 모달창 -->\n      <div class=\"black-bg\" v-if=\"openModal1 == true\">\n          <div class=\"white-bg\">\n              <h2>산책을 취소할까요?</h2>\n              <button class=\"yes\" @click=\"$router.push('/MainPage')\">확인</button>\n              <button class=\"no\" @click=\"openModal1 = false\">취소</button>\n          </div>\n      </div>\n  \n      <!-- 산책종료할건지 확인 모달창 -->\n      <div class=\"black-bg\" v-if=\"openModal2 == true\">\n          <div class=\"white-bg\">\n              <h2>산책을 마칠까요?</h2>\n              <button class=\"quit\" @click=\"stopTimerAndNavigate\">확인</button>\n              <button class=\"close\" @click=\"closeModal\">취소</button>\n          </div>\n      </div>\n  \n      <Sidebar  />\n          <div :style=\"{ 'margin-right' : sidebarHeight, sidebarWidth }\">\n              <router-view />\n          </div>    \n      <div id=\"map\">        \n          <div class=\"uptab\">\n              <img src=\"@/assets/backbutton.png\" class=\"goBack\" @click=\"openModal1 = true\"/>\n  \n              <img class=\"imwith\"  src=\"../assets/people/Preview-8.png\">\n              <img class=\"imwith\" src=\"../assets/people/Preview-3.png\">\n              <img class=\"imwith\" src=\"../assets/people/Preview-3.png\">\n          </div>\n      </div>\n      <div id= \"walkcontainer\">\n          <div id=\"pointcontainer\">\n              <img v-for=\"(image, index) in images\" :key=\"index\" :src=\"image\" class=\"point\" />\n          </div>\n          <div id=\"datacontainer\">\n              <div class=\"walkdata\">\n                  <img src=\"../assets/walkicon.png\">\n                  <p>{{averageNumberOfSteps}} 걸음</p>\n              </div>\n              <div class=\"timerdata\">\n                  <img src=\"../assets/timericon.png\">\n                  <p>{{ formatTime(timer) }}</p>\n              </div>\n              <div class=\"distancedata\">\n                  <img src=\"../assets/distanceicon.png\">\n                  <p>{{ distance.toFixed(2) }}</p>\n              </div>\n          </div>\n  \n          <button \n              type=\"button\" \n              :class=\"{'walkstart': !isWalking, 'walkend' : isWalking }\" \n              @click=\"toggleTimer\">\n              {{ isWalking ? 'Stop' : 'Start' }}\n          </button>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  /* eslint-disable no-undef */\n  import Sidebar from './sidebar/SidebarComponent.vue'\n  import { sidebarWidth, sidebarHeight } from './sidebar/state';\n  import pointImage from '@/assets/point.png';\n  import getpointImage from '@/assets/getpoint.png';\n  \n  \n  function degreesToRadians(degrees) {\n                  return degrees * Math.PI / 180;\n  }\n  \n  function calculateDistance(point1, point2) {\n          const lat1 = point1.getLat();\n          const lng1 = point1.getLng();\n          const lat2 = point2.getLat();\n          const lng2 = point2.getLng();\n          const earthRadiusKm = 6371;\n          const dLat = degreesToRadians(lat2 - lat1);\n          const dLng = degreesToRadians(lng2 - lng1);\n          const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                      Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) *\n                      Math.sin(dLng / 2) * Math.sin(dLng / 2);\n          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n          const distance = earthRadiusKm * c;\n          return distance;\n  }\n  function calculateCaloriesBurned(distance) {\n    // Conversion factor (calories per kilometer)\n    const conversionFactor = 65;\n  \n    // Calculate calories burned\n    const caloriesBurned = distance * conversionFactor;\n  \n    return caloriesBurned;\n  }\n  \n  \n  \n  export default {\n      name: 'KakaoMap',\n      components: {\n          Sidebar,\n          \n      },\n      setup() {\n          return {sidebarWidth , sidebarHeight}\n      },\n      data() {\n          return {\n              map : null,\n              openModal1 : false,\n              openModal2 : false,\n              timer : 0,\n              isWalking : false,\n              distance : 0, // Keep track of total distance\n              watchId: null,\n              position: null,\n              marker: null,\n              previousPosition: null, // Declare previousPosition variable\n              timeoutId: null, // Declare timeoutId variable\n              timerId : null,\n              polyline: null,\n              images : Array(5).fill(pointImage),\n              averageNumberOfSteps: 0,\n          };\n      },\n      mounted() {\n          if (window.kakao && !window.kakao.maps) {\n              this.initMap();\n          } else {\n              const script = document.createElement('script');\n              script.onload = () => kakao.maps.load(this.initMap);\n              script.src = '//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=930ce9e25463ef7e86418ee9d4ba0575';\n              document.head.appendChild(script);\n          }\n      },\n  \n      methods: {\n          initMap() {\n  \n              const success = (position) => {\n                  this.position = position.coords;\n                  const { latitude, longitude } = position.coords;\n                  const currentPosition = new kakao.maps.LatLng(latitude, longitude);\n  \n                  if (!this.map) {\n                      const mapOptions = {\n                          center: new kakao.maps.LatLng(latitude, longitude),\n                          level: 3,\n                          MapTypeId: kakao.maps.MapTypeId.ROADMAP\n                      };\n                      this.map = new kakao.maps.Map(document.getElementById('map'), mapOptions);\n                      this.marker = new kakao.maps.Marker({ position: currentPosition, map: this.map });\n                      this.polyline = new kakao.maps.Polyline({\n                          map: this.map,\n                          path: [],\n                          strokeWeight: 5,\n                          strokeColor: '#00FF00',\n                          strokeOpacity: 0.7,\n                          strokeStyle: 'solid'\n                      });\n                      this.previousPosition = currentPosition;\n  \n                  } else {\n                      const path = this.polyline.getPath();\n                      path.push(currentPosition);\n                      this.polyline.setPath(path);\n  \n                      this.marker.setPosition(currentPosition);\n                      this.map.panTo(currentPosition);\n  \n                      if (this.previousPosition) {\n  \n                          this.previousPosition = currentPosition;\n  \n                          const newDistance = calculateDistance(this.previousPosition, currentPosition);\n                          this.distance += newDistance;\n                          console.log(`Distance traveled: ${newDistance.toFixed(3)} km`);\n                          console.log(`Total distance traveled: ${this.distance.toFixed(3)} km`);\n                      }\n                  }\n              };\n  \n              function error(err) {\n                  console.warn(`ERROR(${err.code}): ${err.message}`);\n              }\n              const watchOptions = { enableHighAccuracy: true };\n              this.watchId = navigator.geolocation.watchPosition(success, error, watchOptions);\n          \n          },\n          calculateAverageSteps(distance) {\n              const averageWalk = 0.762; // 평균적으로 성인 걸음 당 미터\n              const distanceInMeters = distance * 1000;\n              const averageNumberOfSteps = Math.round(distanceInMeters / averageWalk);\n              return averageNumberOfSteps;\n          },\n          startRandomMovement() {\n              if (this.position) {\n                  const { latitude, longitude } = this.position;\n                  const randomLat = latitude + Math.random() * 0.001;\n                  const randomLng = longitude + Math.random() * 0.001;\n                  const newPosition = new kakao.maps.LatLng(randomLat, randomLng);\n  \n                  const path = this.polyline.getPath();\n                  path.push(newPosition);\n                  this.polyline.setPath(path);\n  \n                  this.marker.setPosition(newPosition);\n                  this.map.panTo(newPosition);\n  \n                  if (this.previousPosition) {\n                      const newDistance = calculateDistance(this.previousPosition, newPosition);\n                      this.distance += newDistance;\n  \n                      const averageSteps = this.calculateAverageSteps(this.distance); // 걸음수 계산\n                      this.averageNumberOfSteps = averageSteps;\n  \n  \n                  }\n                  this.previousPosition = newPosition;\n  \n                  this.timeoutId = setTimeout(() => {\n                      this.startRandomMovement();\n                  }, 2000);\n              } else {\n              console.error('Position is not available.');\n              }\n          },\n          \n          stopTracking() {\n              navigator.geolocation.clearWatch(this.watchId);\n              this.distance = 0;\n              this.totalDistance = 0;\n              console.log('Tracking stopped.');\n          },\n          startTimer() {\n              this.timerId = setInterval(() => {\n                  this.timer += 1\n              }, 1000)\n              this.isWalking = true\n          },\n          stopTimer() {\n              clearInterval(this.timerId)\n              clearTimeout(this.timeoutId); // Add this line\n              this.timerId = null\n              this.isWalking = false\n          },\n          stopTimerAndNavigate() {\n              this.stopTimer();\n              this.totalDistance = this.distance; // Assign the current distance to totalDistance\n              this.distance = 0; // Reset the distance\n  \n              const caloriesBurned = calculateCaloriesBurned(this.totalDistance); // Calculate calories bWalkDayReporturned\n              console.log(`소모칼로리: ${caloriesBurned.toFixed(0)} `);\n  \n              const timeData = {\n                  min: Math.floor(this.timer / 60),\n                  seconds: this.timer % 60\n              };\n              console.log('timeData:', timeData);\n              console.log(`Final Distance: ${this.totalDistance.toFixed(3)} km`);\n  \n  \n              this.$router.push({\n                  name: 'WalkDayReport',\n                  query: {\n                      min: timeData.min,\n                      seconds: timeData.seconds,\n                      distance: this.totalDistance,\n                      calories: calculateCaloriesBurned(this.totalDistance), \n                      steps: this.averageNumberOfSteps\n                  },\n              });\n          },\n          toggleTimer() {\n              if (!this.isWalking) {\n                  // Start the timer and random movement\n                  this.isWalking = true;\n                  this.timer = 0;\n                  this.intervalId = setInterval(() => {\n                      this.timer++;\n  \n                      if (this.timer % 5 === 0) {\n                          this.changeImage();\n                      }\n                  }, 1000);\n  \n                  if (this.position) {\n                      this.startRandomMovement();\n                  }else{\n                      console.error('Position is not available.');\n                  }                \n                  // Call the startRandomMovement method\n              } else {\n                  // Stop the timer\n                  this.isWalking = false;\n                  clearInterval(this.intervalId);\n                  clearTimeout(this.timeoutId);\n  \n                  this.stopTimer();\n                  this.openModal2 = true;\n              }\n          },\n          changeImage() {\n              const newImage = getpointImage;\n              const currentIndex = Math.floor(this.timer / 5) - 1;\n  \n              if (currentIndex < this.images.length) {\n                  // Replace the image at the current index with the new image\n                  this.images.splice(currentIndex, 1, newImage);\n              }  \n          },\n          updateChangedImageCount(count) {\n              this.changedImageCount = count;\n          },\n          closeModal() {\n              this.openModal2 = false\n              this.startTimer()\n              this.startRandomMovement(); // Call the startRandomMovement method\n  \n          },\n          formatTime ( seconds ) {\n              const min = Math.floor(seconds / 60)\n              const remainingSeconds = seconds % 60\n              return `${min.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`\n          },\n          destroyed() {\n              this.stopTimer()\n          },\n      }\n  }\n  </script>\n  \n  <style scoped>\n  .scrollable-content {\n  overflow: hidden; /* 혹은 필요한 높이 값으로 설정 */\n}\n  .black-bg {\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.5);\n    position:absolute; \n    z-index: 4;\n  \n  }\n  .white-bg {\n    width: 89%;\n    background: white;\n    border-radius: 8px;\n    padding: 36px 0;\n    font-size: 20px;\n    margin-top: 50%;\n    margin-left: 6%;\n}\n  \n  .yes {\n      cursor: pointer;\n      border : none;\n      background: #7a0317;\n      color: white;\n      font-size: 30px;\n      font-weight: bold;\n      border-radius: 5px;\n      padding: 2vh 4vh;\n      margin: 20px;\n  }\n  .yes:hover {\n      background-color: rgba(182, 10, 10, 0.63);\n      font-weight: bold;\n      transform: scale(1, 1);\n      transition: all 0.3s\n  }\n  \n  .no {\n      cursor: pointer;\n      border : none;\n      background: #cacaca;\n      color: rgb(67, 67, 67);\n      font-size: 30px;\n      font-weight: bold;\n      border-radius: 5px;\n      padding: 2vh 4vh;\n      margin: 10px 20px;\n  }\n  .no:hover {\n      color: white;\n      font-weight: bold;\n      transform: scale(1, 1);\n      transition: all 0.3s\n  }\n  #mappage{ \n      background-color: #EBEFFF;\n      width:inherit;  \n      position:relative; \n      height: 100%;\n      width: 100%;\n  }\n  p {\n      font-weight: bolder;\n      letter-spacing: 3px;\n  }\n  \n  .goBack {\n      float: left;\n      width:4vh;\n      background-color:rgb(255, 255, 255);\n      margin-top: 35px;\n      margin-left: 2vh;\n      border-radius: 20px;\n  }\n  \n  #map {\n      width: 100%;\n      margin:auto;\n      height: 60vh;\n      z-index: 1;\n  }\n  .uptab {\n      z-index: 2;\n      height: 50px;\n      position: absolute;\n  }\n  .imwith {\n      width: 10vh;\n      margin: 10px;\n  }\n  \n  #walkcontainer {\n      width:100%;\n      height: 44vh;\n      background-color: rgb(244, 244, 244);\n  }\n  #pointcontainer {\n      height: 8vh;\n  }\n  #datacontainer {\n      height: 17vh;\n      display: flex;\n  }\n  \n  #datacontainer p {\n      font-size: 20px;\n  }\n  \n  .timerdata img, .walkdata img, .distancedata img {\n      width: 34%;\n      padding: 2vh 1vh;\n  }\n  \n  .point {\n      width: 5vh;\n      padding: 20px 10px;\n  }\n  \n  .walkdata {\n      flex : 1;\n  }\n  \n  .timerdata {\n      flex : 1;\n      \n  }\n  \n  .distancedata {\n      flex : 1;\n  }\n\n  .walkstart{\n    background-color: #77af9c;\n    color: #ffffff;\n    border: none;\n    display: inline-block;\n    margin: 1vh;\n    padding: 3vh 5vh;\n    border-radius: 15px;\n    font-size: 30px;\n    letter-spacing: 5px;\n}\n\n  .walkstart:hover {\n      background-color: #036439;\n      color: white;\n      font-weight: bold;\n      transform: scale(1, 1);\n      transition: all 0.5s\n  }\n  \n  .walkend {\n      background-color: #b40617;\n      color: #ffffff;\n      border: none;\n      display: inline-block;\n      margin: 1vh;\n    padding: 3vh 5vh;\n    border-radius: 15px;\n    font-size: 30px;\n    letter-spacing: 5px; \n  }\n  .walkend:hover {\n      background-color: #790511;\n      color: white;\n      font-weight: bold;\n      transform: scale(1, 1);\n      transition: all 0.5s\n  }\n  .quit {\n      cursor: pointer;\n      border : none;\n      background: #005d35;\n      color: white;\n      font-size: 30px;\n  \n      border-radius: 5px;\n      padding: 2vh 4vh;\n      margin: 20px;\n  }\n  .quit:hover {\n      box-shadow: inset 0 0 0 5px darkgreen;\n      font-weight: bold;\n      transform: scale(1, 1);\n      transition: all 0.3s\n  }\n  .close {\n      cursor: pointer;\n      border : none;\n      background: #cacaca;\n      color: rgb(67, 67, 67);\n      font-size: 30px;\n      font-weight: bold;\n      border-radius: 5px;\n      padding: 2vh 4vh;\n      margin: 10px 20px;\n  }\n  .close:hover {\n      color: white;\n      font-weight: bold;\n      transform: scale(1, 1);\n      transition: all 0.3s\n  }\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}