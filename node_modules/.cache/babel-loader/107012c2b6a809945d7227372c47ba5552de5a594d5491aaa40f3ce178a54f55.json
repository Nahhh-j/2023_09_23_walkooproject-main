{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent } from \"vue\";\nimport data from \"../../assets/rankData.js\";\nexport default defineComponent({\n  name: \"rankingComponent\",\n  data() {\n    return {\n      pageName: \"ranking\",\n      data: data\n    };\n  },\n  methods: {\n    // PetRankPage() {\n    //   // 오른쪽 화살표 버튼이 클릭되었을 때 실행되는 메소드\n    //   this.$router.push(\"/rank/pet\");\n    // },\n    // FamilyRankPage() {\n    //   // 왼쪽 화살표 버튼이 클릭되었을 때 실행되는 메소드\n    //   this.$router.push(\"/rank/family\");\n    // },\n    MyRankPage() {\n      this.$router.push(\"/ranking\");\n    },\n    FriendRankPage() {\n      this.$router.push(\"/friendRank\");\n    },\n    //그래프 width 값 조절: 최대 50으로 함\n    getGreenWidth(count) {\n      // month.count의 값에 따라 .greenanimate의 width 값 계산\n      if (count < 51) {\n        return `${count * 2}%`;\n      } else {\n        return `100%`;\n      }\n    },\n    getPinkWidth(count) {\n      // month.count의 값에 따라 .pinkanimate의 width 값 계산\n      if (count < 51) {\n        return `${count * 2}%`;\n      } else {\n        return `100%`;\n      }\n    },\n    // month.count 비교\n    compareCount() {\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth() + 1;\n      const lastMonth = currentMonth === 1 ? 12 : currentMonth - 1;\n      const filteredMonths = this.data[0].months.filter(month => month.month === currentMonth || month.month === lastMonth);\n      const countOfCurrentMonth = filteredMonths.find(month => month.month === currentMonth)?.count || 0;\n      const countOfLastMonth = filteredMonths.find(month => month.month === lastMonth)?.count || 0;\n      if (countOfCurrentMonth > countOfLastMonth) {\n        return \"이번 달 산책 횟수가 저번 달보다 늘었어요!\";\n      } else if (countOfCurrentMonth < countOfLastMonth) {\n        return \"이번 달 산책 횟수가 저번 달보다 줄었어요!\";\n      } else {\n        return \"이번 달 산책 횟수와 저번 달 산책 횟수가 같아요!\";\n      }\n    }\n  },\n  computed: {\n    sortedFriends() {\n      // friends 배열을 count 값에 따라 내림차순으로 정렬하여 반환하는 새로운 배열을 생성\n      const sortedArr = [...this.data[1].friends].sort((a, b) => b.count - a.count);\n      return sortedArr;\n    },\n    lastTwoMonths() {\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth() + 1; // JavaScript의 getMonth()는 0부터 시작하므로 +1 해줌\n      const lastMonth = currentMonth === 1 ? 12 : currentMonth - 1; // 저번 달 계산\n      return this.data[0].months.filter(month => month.month === currentMonth || month.month === lastMonth);\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      const greenElements = this.$refs.green;\n      greenElements.forEach(element => {\n        element.classList.add(\"greenanimate\");\n      });\n      const pinkElements = this.$refs.pink;\n      pinkElements.forEach(element => {\n        element.classList.add(\"pinkanimate\");\n      });\n    });\n  }\n});","map":{"version":3,"names":["defineComponent","data","name","pageName","methods","MyRankPage","$router","push","FriendRankPage","getGreenWidth","count","getPinkWidth","compareCount","currentDate","Date","currentMonth","getMonth","lastMonth","filteredMonths","months","filter","month","countOfCurrentMonth","find","countOfLastMonth","computed","sortedFriends","sortedArr","friends","sort","a","b","lastTwoMonths","mounted","$nextTick","greenElements","$refs","green","forEach","element","classList","add","pinkElements","pink"],"sources":["/Users/nayoung/Downloads/2023_09_23_walkooproject-main/src/components/rank/Ranking.vue"],"sourcesContent":["<template>\n  <div id=\"Myrankingpg\">\n    <!-- top -->\n    <div class=\"top\">\n      <div class=\"top_wrap\">\n        <div class=\"top_left\">\n          <img\n            class=\"icon\"\n            src=\"@/assets/backbutton.png\"\n            @click=\"$router.go(-1)\"\n          />\n        </div>\n        <p class=\"top_center\">랭킹</p>\n        <div class=\"top_right\"></div>\n      </div>\n    </div>\n\n    <div class=\"Rank_middle\">\n      <!-- <div class=\"myRank_wrap\">\n        <h3 id=\"myRank\">나의 랭킹</h3>\n      </div> -->\n      <div class=\"buttons_container\">\n        <button @click=\"MyRankPage\" class=\"click_rank_button\">나의 랭킹</button>\n        <button @click=\"FriendRankPage\" class=\"rank_button\">친구 랭킹</button>\n      </div>\n\n      <!-- 랭킹 데이터 -->\n      <div class=\"rank_margin\">\n        <!-- <div class=\"rank\"> -->\n          <div class=\"rank-container\">\n            <h2 class=\"text_style_title\">{{ data[0].title }}</h2>\n            <p class=\"text_style_subtitle\">{{ compareCount() }}</p>\n            <div class=\"green-rank\">\n              <!-- months 데이터 반복문 -->\n              <div v-for=\"month in lastTwoMonths\" :key=\"month.id\">\n                <p class=\"text_style_content\"> {{ month.month }}월</p>\n                <!-- month 그래프 -->\n                <div class=\"graph\">\n                  <div class=\"text\">{{ month.count }}회</div>\n                  <div\n                    ref=\"green\"\n                    :style=\"{ width: getGreenWidth(month.count) }\"\n                  ></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- 그래프 추가하고 싶음 -->\n          <div class=\"rank-container\">\n            <h2 class=\"text_style_title\">{{ data[1].title }}</h2>\n            <div class=\"pink-rank\">\n              <!-- friends 데이터 반복문 -->\n              <div v-for=\"(friend, index) in sortedFriends\" :key=\"friend.id\">\n                <div class=\"friend-container\" v-show=\"friend.count !== 0\">\n                  <div class=\"profile\">\n                    <img :src=\"friend.img\" />\n                  </div>\n                  <div class=\"friend-info\">\n                    <p class=\"text_style_content\">{{ friend.name }}</p>\n                    <div class=\"graph\">\n                      <div class=\"text\">{{ friend.count }}회</div>\n                      <div\n                        ref=\"pink\"\n                        :style=\"{ width: getPinkWidth(friend.count) }\"\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n                <!-- 마지막 데이터가 아닐 때만 구분선 표시 -->\n                <hr\n                  class=\"friend-separator\"\n                  v-if=\"\n                    index < sortedFriends.length - 1 &&\n                    friend.count !== 0 &&\n                    sortedFriends[index + 1].count !== 0\n                  \"\n                />\n              </div>\n            </div>\n          </div>\n        <!-- </div> -->\n      </div>\n    </div>\n\n    <!-- <div class=\"page-indicator\">\n      <span class=\"filled\"></span>\n      <span class=\"empty\"></span>\n      <span class=\"empty\"></span>\n      <span class=\"empty\"></span>\n    </div> -->\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from \"vue\";\nimport data from \"../../assets/rankData.js\";\n\nexport default defineComponent({\n  name: \"rankingComponent\",\n  data() {\n    return {\n      pageName: \"ranking\",\n      data: data,\n    };\n  },\n  methods: {\n    // PetRankPage() {\n    //   // 오른쪽 화살표 버튼이 클릭되었을 때 실행되는 메소드\n    //   this.$router.push(\"/rank/pet\");\n    // },\n    // FamilyRankPage() {\n    //   // 왼쪽 화살표 버튼이 클릭되었을 때 실행되는 메소드\n    //   this.$router.push(\"/rank/family\");\n    // },\n    MyRankPage() {\n      this.$router.push(\"/ranking\");\n    },\n    FriendRankPage() {\n      this.$router.push(\"/friendRank\");\n    },\n\n    //그래프 width 값 조절: 최대 50으로 함\n    getGreenWidth(count) {\n      // month.count의 값에 따라 .greenanimate의 width 값 계산\n      if (count < 51) {\n        return `${count * 2}%`;\n      } else {\n        return `100%`;\n      }\n    },\n    getPinkWidth(count) {\n      // month.count의 값에 따라 .pinkanimate의 width 값 계산\n      if (count < 51) {\n        return `${count * 2}%`;\n      } else {\n        return `100%`;\n      }\n    },\n\n    // month.count 비교\n    compareCount() {\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth() + 1;\n      const lastMonth = currentMonth === 1 ? 12 : currentMonth - 1;\n\n      const filteredMonths = this.data[0].months.filter(\n        (month) => month.month === currentMonth || month.month === lastMonth\n      );\n      const countOfCurrentMonth =\n        filteredMonths.find((month) => month.month === currentMonth)?.count ||\n        0;\n      const countOfLastMonth =\n        filteredMonths.find((month) => month.month === lastMonth)?.count || 0;\n\n      if (countOfCurrentMonth > countOfLastMonth) {\n        return \"이번 달 산책 횟수가 저번 달보다 늘었어요!\";\n      } else if (countOfCurrentMonth < countOfLastMonth) {\n        return \"이번 달 산책 횟수가 저번 달보다 줄었어요!\";\n      } else {\n        return \"이번 달 산책 횟수와 저번 달 산책 횟수가 같아요!\";\n      }\n    },\n  },\n  computed: {\n    sortedFriends() {\n      // friends 배열을 count 값에 따라 내림차순으로 정렬하여 반환하는 새로운 배열을 생성\n      const sortedArr = [...this.data[1].friends].sort(\n        (a, b) => b.count - a.count\n      );\n      return sortedArr;\n    },\n    lastTwoMonths() {\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth() + 1; // JavaScript의 getMonth()는 0부터 시작하므로 +1 해줌\n      const lastMonth = currentMonth === 1 ? 12 : currentMonth - 1; // 저번 달 계산\n      return this.data[0].months.filter(\n        (month) => month.month === currentMonth || month.month === lastMonth\n      );\n    },\n  },\n  mounted() {\n    this.$nextTick(() => {\n      const greenElements = this.$refs.green;\n      greenElements.forEach((element) => {\n        element.classList.add(\"greenanimate\");\n      });\n\n      const pinkElements = this.$refs.pink;\n      pinkElements.forEach((element) => {\n        element.classList.add(\"pinkanimate\");\n      });\n    });\n  },\n});\n</script>\n\n<style>\n.text_style_title{\n  text-align: left;\n}\n.text_style_subtitle{\n  text-align: left;\n  padding-left: 2%;\n  font-size: 2.1vh;\n  color: #353535;\n}\n.text_style_content{\n  text-align: left;\n}\n#Myrankingpg {\n  width: 100%;\n  height: 90vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.Rank_middle {\n  width: 100%;\n  height: 90%;\n}\n/* 페이지 정보*/\n.rank-head {\n  background-color: #687089;\n  padding: 40px 30px 20px 30px;\n  color: #ffffff;\n  font-size: 25px;\n  height: 5vh;\n  font-weight: bolder;\n  letter-spacing: 20px;\n  text-align: center;\n}\n\n/* 페이지 정보 바 */\n.myRank_wrap {\n  width: 100%;\n  height: 9%;\n  padding: 2%;\n  box-sizing: border-box;\n}\n#myRank {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #dfefff;\n  border-radius: 10px;\n  color: #ffffff;\n}\n\n/* 페이지 이동 버튼 */\n.buttons_container{\n  width: 100%;\n  height: 7%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 2.5%;\n  margin-bottom: 3%;\n}\n.rank_button {\n  width: 50%;\n  height: 100%;\n  margin: 3.5%;\n  font-size: 15px;\n  border: none;\n  color: #00c0ff;\n  padding: 2%;\n  cursor: pointer;\n  border-radius: 3vh;\n  background-color: #dfefff;\n}\n.click_rank_button {\n  width: 50%;\n  height: 100%;\n  margin: 3.5%;\n  font-size: 15px;\n  border: none;\n  color: #dfefff;\n  padding: 2%;\n  cursor: pointer;\n  border-radius: 3vh;\n  background-color:#00c0ff;\n}\n\n/* 페이지 전체 테두리 */\n.rank_margin {\n  width: 100%;\n  height: 80%;\n  padding: 3%;\n  box-sizing: border-box;\n}\n.rank {\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  border: 5px solid #e7e4e4;\n  border-radius: 20px;\n  padding: 3%;\n  overflow-y: scroll;\n}\n.rank-container {\n  padding-top: 1%;\n  padding-bottom: 0.1%;\n}\n\n/* 초록 테두리와 핑크 테두리 */\n.green-rank {\n  background-color: #ffffff;\n  border: 2px solid #00c0ff;\n  border-radius: 10px;\n  margin: 2%;\n  padding: 7%;\n  margin-bottom: 7%;\n}\n.pink-rank {\n  border: 2px solid #00c0ff;\n  border-radius: 10px;\n  padding: 7%;\n  margin: 2%;\n}\n\n/*그래프 */\n.graph {\n  position: relative;\n  width: 100%;\n  height: 30px;\n  background-color: #dedede;\n  margin-top: 1.5%;\n  margin-bottom: 3%;\n}\n.graph .text {\n  position: absolute;\n  left: 10px;\n  top: 4px;\n  z-index: 1;\n  color: #353535;\n  font-size: 2.1vh;\n}\n.greenanimate {\n  height: 30px;\n  text-align: center;\n  background-color: #dfefff;\n  color: #111;\n  animation-name: fadegreen;\n  animation-duration: 3s;\n}\n.pinkanimate {\n  height: 30px;\n  text-align: center;\n  background-color: #dfefff;\n  color: #111;\n  animation-name: fadepink;\n  animation-duration: 3s;\n}\n@keyframes fadegreen {\n  0% {\n    width: 0%;\n  }\n  100% {\n  }\n}\n@keyframes fadepink {\n  0% {\n    width: 0%;\n  }\n  100% {\n  }\n}\n\n/* 프로필 사진 */\n.friend-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n.profile {\n  width: 70px;\n  height: 70px;\n  border-radius: 50%;\n  overflow: hidden;\n  margin-right: 20px;\n}\n.profile img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n.friend-info {\n  flex: 1;\n  text-align: left;\n}\n\n/* 구분선 */\n.friend-separator {\n  border: 1.5px solid #dddddd;\n}\n\n/* 페이지 위치 */\n.page-indicator {\n  font-size: 24px;\n}\n.page-indicator span {\n  display: inline-block;\n  margin-right: 5px;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n}\n.page-indicator .filled {\n  background-color: #000;\n  border: 1px solid #000;\n}\n.page-indicator .empty {\n  border: 1px solid #eaeaea;\n  background-color: #eaeaea;\n}\n\n/* top 가운데 정렬 */\n.top_10 {\n  text-align: center;\n}\n</style>\n<style>\n.arrow-button:hover {\n  color: rgb(64, 64, 64);\n  font-weight: bolder;\n  transform: scale(1, 1);\n  transition: all 0.3s;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}